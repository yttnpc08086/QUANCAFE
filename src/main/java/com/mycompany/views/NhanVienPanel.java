/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.views;

import com.mycompany.DAO.NhanVienDAO;
import com.mycompany.Helper.Auth;
import com.mycompany.Helper.ConnectUtil;
import com.mycompany.Helper.MsgBox;
import com.mycompany.Model.NhanVien;
import com.toedter.calendar.JDateChooser;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class NhanVienPanel extends javax.swing.JPanel {

    NhanVienDAO nvDao = new NhanVienDAO();
    int row = -1;

    /**
     * Creates new form NewJPanel
     */
    public NhanVienPanel() {
        initComponents();
        loadData();
        init();
    }

    private void loadData() {
        loadNhanVienhd();
        loadNhanVienkhd();

    }

    private void loadNhanVienhd() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVienkhd.getModel();
        model.setRowCount(0);

        try {
            String sql = "SELECT * FROM NhanVien Where Trangthai=1";
            ResultSet rs = ConnectUtil.query(sql);

            while (rs.next()) {
                String idNhanvien = rs.getString("ID_Nhanvien");
                String tenNV = rs.getNString("TenNV");
                boolean gioiTinh = rs.getBoolean("GioiTinh");
                String ngaysinh = rs.getString("Ngaysinh");
                String sdt = rs.getString("SDT");
                String diachi = rs.getNString("diaChi");
                String email = rs.getString("Email");
                boolean vaitro = rs.getBoolean("Vaitro");
                boolean trangThai = rs.getBoolean("Trangthai");

                model.addRow(new Object[]{idNhanvien, tenNV, gioiTinh, ngaysinh, sdt, diachi, email, vaitro, trangThai});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadNhanVienkhd() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVienhd.getModel();
        model.setRowCount(0); // Clear existing rows

        try {
            String sql = "SELECT * FROM NhanVien Where Trangthai=0";
            ResultSet rs = ConnectUtil.query(sql);

            while (rs.next()) {
                String idNhanvien = rs.getString("ID_Nhanvien");
                String tenNV = rs.getNString("TenNV");
                boolean gioiTinh = rs.getBoolean("GioiTinh");
                String ngaysinh = rs.getString("Ngaysinh");
                String sdt = rs.getString("SDT");
                String diachi = rs.getNString("Diachi");
                String email = rs.getString("Email");
                boolean vaitro = rs.getBoolean("Vaitro");
                boolean trangThai = rs.getBoolean("Trangthai");
                model.addRow(new Object[]{idNhanvien, tenNV, gioiTinh, ngaysinh, sdt, diachi, email, vaitro, trangThai});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpVaiTro = new javax.swing.ButtonGroup();
        grpTrangThai = new javax.swing.ButtonGroup();
        grpGioiTinh = new javax.swing.ButtonGroup();
        rdoNu = new javax.swing.JRadioButton();
        btnSua = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tbnLamMoi = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblNhanVienhd = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNhanVienkhd = new javax.swing.JTable();
        rdoNhanvien = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        txtMatkhau = new javax.swing.JPasswordField();
        rdoNghiViec = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rdoLamViec = new javax.swing.JRadioButton();
        txtTenNV = new javax.swing.JTextField();
        btnExcel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rdoNam = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rdoQuanly = new javax.swing.JRadioButton();
        txtTaikhoan = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        dchNgaySinh = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtDiachi = new javax.swing.JTextField();

        grpGioiTinh.add(rdoNu);
        rdoNu.setSelected(true);
        rdoNu.setText("Nữ");

        btnSua.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit_1.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Ngày sinh");

        tbnLamMoi.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        tbnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        tbnLamMoi.setText("Làm mới");
        tbnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbnLamMoiActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Email");

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jTabbedPane4.setPreferredSize(new java.awt.Dimension(300, 200));
        jTabbedPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane4MouseClicked(evt);
            }
        });

        jPanel6.setPreferredSize(new java.awt.Dimension(300, 200));

        jScrollPane7.setPreferredSize(new java.awt.Dimension(300, 200));

        tblNhanVienhd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã NV ", "Tên ", "Giới tính", "Ngày sinh", "SDT", "Địa chỉ", "Email", "Vai trò"
            }
        ));
        tblNhanVienhd.setGridColor(new java.awt.Color(0, 0, 0));
        tblNhanVienhd.setPreferredSize(new java.awt.Dimension(300, 200));
        tblNhanVienhd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienhdMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblNhanVienhd);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Nhân viên hoạt động", jPanel6);

        jPanel7.setPreferredSize(new java.awt.Dimension(300, 200));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(300, 200));

        tblNhanVienkhd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã NV ", "Tên ", "Giới tính", "Ngày sinh", "SDT", "Địa chỉ", "Email", "Vai trò"
            }
        ));
        tblNhanVienkhd.setGridColor(new java.awt.Color(0, 0, 0));
        tblNhanVienkhd.setPreferredSize(new java.awt.Dimension(300, 200));
        tblNhanVienkhd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienkhdMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblNhanVienkhd);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Nhân viên không hoạt động", jPanel7);

        grpVaiTro.add(rdoNhanvien);
        rdoNhanvien.setSelected(true);
        rdoNhanvien.setText("Nhân viên");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Mật khẩu");

        grpTrangThai.add(rdoNghiViec);
        rdoNghiViec.setText("Nghỉ việc");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Tên NV");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Trạng thái");

        grpTrangThai.add(rdoLamViec);
        rdoLamViec.setText("Làm việc");

        txtTenNV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTenNVKeyReleased(evt);
            }
        });

        btnExcel.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Giới tính");

        grpGioiTinh.add(rdoNam);
        rdoNam.setText("Nam");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Vai trò");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Mã NV");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Tài khoản");

        grpVaiTro.add(rdoQuanly);
        rdoQuanly.setText("Quản lý");

        btnThem.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("SDT");

        txtSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Địa chỉ");

        txtDiachi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiachiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 50, Short.MAX_VALUE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(tbnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDiachi))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dchNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSDT, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(399, 399, 399))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTenNV)
                                    .addComponent(txtMaNV)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdoNam)
                                        .addGap(15, 15, 15)
                                        .addComponent(rdoNu)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel5))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTaikhoan)
                                    .addComponent(txtMatkhau, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(rdoNghiViec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(rdoQuanly, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(rdoNhanvien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(rdoLamViec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))))
                        .addGap(176, 176, 176))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(rdoNam)
                            .addComponent(rdoNu)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtTaikhoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtMatkhau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoQuanly)
                            .addComponent(rdoNhanvien)
                            .addComponent(jLabel11))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(rdoNghiViec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rdoLamViec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(dchNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtDiachi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void tbnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbnLamMoiActionPerformed
        clearForm();
    }//GEN-LAST:event_tbnLamMoiActionPerformed

    private void tblNhanVienhdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienhdMouseClicked
        row = tblNhanVienhd.getSelectedRow();
        if (row >= 0) {
            edit2();
            jTabbedPane4.setSelectedIndex(0);
        }
    }//GEN-LAST:event_tblNhanVienhdMouseClicked

    private void tblNhanVienkhdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienkhdMouseClicked

        row = tblNhanVienkhd.getSelectedRow();
        if (row >= 0) {
            edit();
            jTabbedPane4.setSelectedIndex(1);
        }
    }//GEN-LAST:event_tblNhanVienkhdMouseClicked

    private void jTabbedPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane4MouseClicked

    private void txtTenNVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenNVKeyReleased
        fillTableSearchName(txtTenNV.getText());
        updateStatus();
        row = -1;
    }//GEN-LAST:event_txtTenNVKeyReleased

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        exportToExcel();
//        XEcel ecel = new XEcel();
//        ecel.exportToExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        insert();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTActionPerformed

    private void txtDiachiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiachiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiachiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private com.toedter.calendar.JDateChooser dchNgaySinh;
    private javax.swing.ButtonGroup grpGioiTinh;
    private javax.swing.ButtonGroup grpTrangThai;
    private javax.swing.ButtonGroup grpVaiTro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JRadioButton rdoLamViec;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNghiViec;
    private javax.swing.JRadioButton rdoNhanvien;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JRadioButton rdoQuanly;
    private javax.swing.JTable tblNhanVienhd;
    private javax.swing.JTable tblNhanVienkhd;
    private javax.swing.JButton tbnLamMoi;
    private javax.swing.JTextField txtDiachi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JPasswordField txtMatkhau;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTaikhoan;
    private javax.swing.JTextField txtTenNV;
    // End of variables declaration//GEN-END:variables

    void init() {
        if (jTabbedPane4.getSelectedIndex() == 0) {
            this.fillToTableNVHD();
            row = 0;
            this.updateStatus();
        }
        this.fillToTableNVKHD();
        clearForm();

    }

    void insert() {
        if (checkNull()
                && checkRegex()
                && checkEmail()
                && validateNgaySinh(dchNgaySinh)
                && checkLength()
                && checkSame()
                && checkSameAccount()) {

            try {
                nvDao.insert(getForm()); // Giả định getForm() trả về đối tượng nhân viên
                this.fillToTableNVKHD(); // Cập nhật bảng nhân viên không hoạt động
                this.fillToTableNVHD();  // Cập nhật bảng nhân viên hoạt động
                this.clearForm(); // Xóa form sau khi thêm mới thành công
                MsgBox.alert(this, "Thêm mới thành công");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.alert(this, "Thêm mới thất bại");
            }
        }
    }

    void update() {
        if (checkNull()
                && checkRegex()
                && checkEmail()
                && validateNgaySinh(dchNgaySinh)
                && checkLength() //                && checkSame()
                ) {
            try {
                nvDao.update(getForm());
                this.fillToTableNVHD();
                this.fillToTableNVKHD();
                MsgBox.alert(this, "Update thành công!!");
                clearForm();
            } catch (Exception e) {
                MsgBox.alert(this, "Cập nhật thất bại!");
                e.printStackTrace();
            }

        }
    }

    void delete() {
        String manv = txtMaNV.getText();
        if (Auth.user == null) {
            MsgBox.alert(this, "Người dùng chưa đăng nhập!");
            return;
        }

        if (manv.equals(Auth.user.getId_Nhanvien())) {
            MsgBox.alert(this, "Bạn không được phép xóa chính mình!");
        } else if (MsgBox.confirm(this, "Bạn muốn xóa nhân viên?")) {
            try {
                if (rdoLamViec.isSelected()) {
                    nvDao.deletehd(manv);
                } else {
                    nvDao.deleteKhd(manv);
                }
                this.fillToTableNVHD();
                this.fillToTableNVKHD();
                this.clearForm();
                MsgBox.alert(this, "Xóa thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xóa thất bại");
                e.printStackTrace();
            }
        }
    }

    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVienkhd.getModel();
        model.setRowCount(0);
        try {
            List<NhanVien> list = nvDao.selectAll();
            for (NhanVien nv : list) {
                model.addRow(new Object[]{
                    nv.getId_Nhanvien(),
                    nv.getTenNV(),
                    nv.isGender() ? "Nam" : "Nữ",
                    nv.getNgaysinh(),
                    nv.getDiaChi(),
                    nv.getSDT(),
                    nv.getEmail(),
                    nv.isVaiTro() ? "Quản lý" : "Nhân viên",
                    nv.isTrangThai() ? "Làm việc" : "Nghỉ việc",});
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    void setFrom(NhanVien nv) {
        txtMaNV.setText(nv.getId_Nhanvien());
        txtTenNV.setText(nv.getTenNV());
        rdoNam.setSelected(nv.isGender());
        rdoNu.setSelected(!nv.isGender());
        dchNgaySinh.setDate(nv.getNgaysinh()); // Sử dụng JDateChooser
        txtEmail.setText(nv.getEmail());
        txtDiachi.setText(nv.getDiaChi());
        txtSDT.setText(nv.getSDT());
        txtTaikhoan.setText(nv.getUserName());
        txtMatkhau.setText(nv.getPass());
        rdoQuanly.setSelected(nv.isVaiTro());
        rdoNhanvien.setSelected(!nv.isVaiTro());
        rdoLamViec.setSelected(nv.isTrangThai());
        rdoNghiViec.setSelected(!nv.isTrangThai());
    }

    public NhanVien getForm() {
        NhanVien nv = new NhanVien();
        nv.setId_Nhanvien(txtMaNV.getText());
        nv.setTenNV(txtTenNV.getText());
        nv.setGender(rdoNam.isSelected());

        // Lấy ngày sinh từ JDateChooser
        Date ngaySinh = dchNgaySinh.getDate();
        if (ngaySinh != null) {
            nv.setNgaysinh(ngaySinh);
        } else {
            nv.setNgaysinh(null); // Hoặc đặt giá trị mặc định nếu cần
        }
        nv.setSDT(txtSDT.getText());
        nv.setEmail(txtEmail.getText());
        nv.setDiaChi(txtDiachi.getText());
        nv.setUserName(txtTaikhoan.getText());
        nv.setPass(new String(txtMatkhau.getPassword())); // Đặt giá trị mật khẩu
        nv.setVaiTro(rdoQuanly.isSelected());
        nv.setTrangThai(rdoLamViec.isSelected());
        return nv;
    }

    void clearForm() {
        NhanVien nv = new NhanVien();
        this.setFrom(nv);
        this.row = -1;
        this.updateStatus();
    }

    void edit() {
        String manv = (String) tblNhanVienkhd.getValueAt(this.row, 0);
        NhanVien nv = nvDao.selectById(manv);
        this.setFrom(nv);
        jTabbedPane4.setSelectedIndex(0);
        this.updateStatus();
        tblNhanVienkhd.setRowSelectionInterval(row, row);
    }

    void edit2() {

        String manv = (String) tblNhanVienhd.getValueAt(this.row, 0);
        NhanVien nv = nvDao.selectById(manv);
        this.setFrom(nv);
        jTabbedPane4.setSelectedIndex(1);
        this.updateStatus2();
        tblNhanVienhd.setRowSelectionInterval(row, row);
    }

    void updateStatus() {
        boolean edit = this.row >= 0;
        txtMaNV.setEditable(true);
        txtTaikhoan.setEditable(!edit);
        txtTenNV.setEditable(true);
        txtEmail.setEditable(true);
        txtSDT.setEditable(true);
        txtDiachi.setEditable(true);
        txtMatkhau.setEditable(!edit);
        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
    }

    void updateStatus2() {
        boolean edit = this.row >= 0;
        txtMaNV.setEditable(!edit);
        txtTenNV.setEditable(edit);
        txtEmail.setEditable(edit);
        txtDiachi.setEditable(edit);
        txtTaikhoan.setEditable(edit);
        txtSDT.setEditable(edit);
        txtMatkhau.setEditable(edit);
        btnThem.setEnabled(false);
        btnSua.setEnabled(true);
        btnXoa.setEnabled(true);
        tbnLamMoi.setEnabled(true);
    }

    private void fillToTableNVHD() {
        List<NhanVien> list = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tblNhanVienhd.getModel();
        model.setRowCount(0);
        try {
            list = nvDao.selectByTrangThai(1);
            for (NhanVien nv : list) {
                model.addRow(new Object[]{
                    nv.getId_Nhanvien(),
                    nv.getTenNV(),
                    nv.isGender() ? "Nam" : "Nữ",
                    nv.getNgaysinh(),
                    nv.getSDT(),
                    nv.getDiaChi(),
                    nv.getEmail(),
                    nv.isVaiTro() ? "Quản lý" : "Nhân viên",
                    nv.isTrangThai() ? "Làm việc" : "Nghỉ việc"
                });
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillToTableNVKHD() {
        List<NhanVien> list = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tblNhanVienkhd.getModel();
        model.setRowCount(0);
        try {
            list = nvDao.selectByTrangThai(0);
            for (NhanVien nv : list) {
                model.addRow(new Object[]{
                    nv.getId_Nhanvien(),
                    nv.getTenNV(),
                    nv.isGender() ? "Nam" : "Nữ",
                    nv.getNgaysinh(),
                    nv.getSDT(),
                    nv.getDiaChi(),
                    nv.getEmail(),
                    nv.isVaiTro() ? "Quản lý" : "Nhân viên",
                    nv.isTrangThai() ? "Làm việc" : "Nghỉ việc"
                });
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean checkNull() {
        if (txtMaNV.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống mã nhân viên");
            txtMaNV.requestFocus();
            return false;
        }
        if (txtTenNV.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống tên nhân viên");
            txtTenNV.requestFocus();
            return false;
        }

        if (txtEmail.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống Email nhân viên");
            txtEmail.requestFocus();
            return false;
        }

//        if (txtDiachi.getText().isEmpty() == true) {
//            MsgBox.alert(this, "Không được để trống địa chỉ");
//            return false;
//        }
        if (txtTaikhoan.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống tài khoản");
            txtTaikhoan.requestFocus();
            return false;
        }
        if (txtMatkhau.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống mật khẩu");
            txtMatkhau.requestFocus();
            return false;
        }
        if (txtSDT.getText().isEmpty() == true) {
            MsgBox.alert(this, "Không được để trống số điện thoại");
            txtSDT.requestFocus();
            return false;
        }
        return true;
    }

    public boolean checkRegex() {
        Pattern regexName = Pattern.compile("^[a-zA-Z_ÀÁÂÃÈÉÊẾÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêếìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ\\ ]+$");

        if (!regexName.matcher(txtTenNV.getText().trim()).matches()) {
            MsgBox.alert(this, "Tên chứa ký tự đặc biệt, vui lòng xem lại!");
            txtTenNV.requestFocus();
            return false;
        }

        if (Pattern.compile("[^a-zA-Z0-9]").matcher(txtTaikhoan.getText().trim()).find()) {
            MsgBox.alert(this, "Tài khoản chứa ký tự đặc biệt, vui lòng xem lại!");
            txtTaikhoan.requestFocus();
            return false;
        }

        if (Pattern.compile("[^a-zA-Z0-9]").matcher(txtMatkhau.getText().trim()).find()) {
            MsgBox.alert(this, "Mật khẩu chứa ký tự đặc biệt, vui lòng xem lại!");
            txtMatkhau.requestFocus();
            return false;
        }
        Pattern regexPhone = Pattern.compile("^(03|05|07|08|09)\\d{8}$");
        if (!regexPhone.matcher(txtSDT.getText().trim()).matches()) {
            MsgBox.alert(this, "Số điện thoại không hợp lệ. Vui lòng nhập số điện thoại 10 số của các nhà mạng Việt Nam.");
            txtSDT.requestFocus();
            return false;
        }
        return true;
    }

    boolean validateNgaySinh(JDateChooser dchNgaySinh) {
        // Lấy ngày từ JDateChooser
        Date date = dchNgaySinh.getDate();

        if (date == null) {
            MsgBox.alert(this, "Ngày sinh không được để trống.");
            return false;
        }

        // Định dạng ngày theo yêu cầu
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String ngaySinh = sdf.format(date);

        try {
            // Chuyển đổi chuỗi ngày thành đối tượng Date
            Date parsedDate = sdf.parse(ngaySinh);

            // Kiểm tra tuổi của người dùng (ít nhất 16 tuổi)
            long currentTime = System.currentTimeMillis();
            long sixteenYearsInMillis = 16L * 365 * 24 * 60 * 60 * 1000; // 16 năm tính bằng mili giây
            long dobTime = parsedDate.getTime();

            if ((currentTime - dobTime) < sixteenYearsInMillis) {
                MsgBox.alert(this, "Bạn phải ít nhất 16 tuổi.");
                return false;
            }

            return true;
        } catch (Exception e) {
            // Nếu định dạng không hợp lệ
            MsgBox.alert(this, "Ngày sinh không hợp lệ.");
            return false;
        }
    }

    public boolean checkEmail() {
        String email = txtEmail.getText();
        String regex = "^[a-zA-Z][a-zA-Z0-9_\\.]{2,32}@[a-zA-Z0-9]{2,10}(\\.[a-zA-Z0-9]{2,4}){1,2}$";
        if (!email.matches(regex)) {
            MsgBox.alert(this, "Email không đúng định dạng");
            txtEmail.setText("");
            txtEmail.requestFocus();
            return false;
        }
        return true;
    }

    private boolean checkSame() {
        if (nvDao.selectById(txtMaNV.getText()) != null) {
          txtMaNV.setText("NV" + (nvDao.selectMaxId() + 1));
            MsgBox.alert(this, "Mã nhân viên đã tồn tại. Mã nhân viên đã được tạo mới!");
            return true;
        }
        return true;
    }

    private boolean checkSameAccount() {
        if (nvDao.selectByAccount(txtTaikhoan.getText()) != null) {
            MsgBox.alert(this, "Trùng tài khoản nhân viên");
            txtTaikhoan.setText("");
            txtTaikhoan.requestFocus();
            return false;
        }
        return true;
    }

    private boolean checkLength() {
        if (txtTaikhoan.getText().length() < 5 || txtTaikhoan.getText().length() > 50) {
            MsgBox.alert(this, "Tài khoản phải từ 5 ký tự tối đa 50 ký tự");
            txtTaikhoan.setText("");
            txtTaikhoan.requestFocus();
            return false;
        }
        if (txtTenNV.getText().length() < 5) {
            MsgBox.alert(this, "Tên nhân viên phải tối thiểu 5 ký tự");
            txtTenNV.setText("");
            txtTenNV.requestFocus();
            return false;
        }
        return true;
    }

    public void fillTableSearchName(String nhanVien) {
        DefaultTableModel model = (DefaultTableModel) tblNhanVienhd.getModel();
        model.setRowCount(0);
        try {
            String keyword = txtTenNV.getText();
            List<NhanVien> list = nvDao.selectByKeyword(keyword);
            for (NhanVien nv : list) {
                model.addRow(new Object[]{
                    nv.getId_Nhanvien(),
                    nv.getTenNV(),
                    nv.isGender() ? "Nam" : "Nữ",
                    nv.getNgaysinh(),
                    nv.getDiaChi(),
                    nv.getEmail(),
                    nv.isVaiTro() ? "Quản lý" : "Nhân viên",
                    nv.isTrangThai() ? "Làm việc" : "Nghỉ việc"
                });
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

//    void TuDongHoa() {
//        if (nvDao.selectAll().isEmpty()) {
//            txtMaNV.setText("NV01");
//        } else {
//            txtMaNV.setText("NV" + (nvDao.selectMaxId() + 1));
//        }
//    }
    private void exportToExcel() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
        fileChooser.setSelectedFile(new File("DSSV.xlsx")); // Đặt tên file mặc định

        // Hiển thị hộp thoại lưu file
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection != JFileChooser.APPROVE_OPTION) {
            MsgBox.alert(null, "Người dùng hủy chọn lưu file.");
            return;
        }

        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();

        // Nếu người dùng không nhập đuôi file, thêm đuôi ".xlsx"
        if (!filePath.endsWith(".xlsx")) {
            filePath += ".xlsx";

        }

        Workbook workbook = new XSSFWorkbook();
        Sheet sheetHd = workbook.createSheet("NV hoạt động");
        Sheet sheetkhd = workbook.createSheet("NV không hoạt động");

        exportTableToSheet(tblNhanVienhd, sheetHd);

        exportTableToSheet(tblNhanVienkhd, sheetkhd);

        try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
            workbook.write(fileOut);
            workbook.close();
            MsgBox.alert(this, "Xuất dữ liệu ra Excel thành công.");
        } catch (IOException e) {
            e.printStackTrace();
            MsgBox.alert(this, "Có lỗi xảy ra khi xuất dữ liệu ra Excel.");
        }
    }

    private void exportTableToSheet(javax.swing.JTable table, Sheet sheet) {
        TableModel model = table.getModel();

        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < model.getColumnCount(); i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(model.getColumnName(i));
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            Row row = sheet.createRow((short) i + 1);
            for (int j = 0; j < model.getColumnCount(); j++) {
                Cell cell = row.createCell((short) j);
                cell.setCellValue(Objects.toString(model.getValueAt(i, j), ""));
            }
        }

        // Auto size columns once after all data is populated
        for (int i = 0; i < model.getColumnCount(); i++) {
            sheet.autoSizeColumn(i);
        }
    }
}
